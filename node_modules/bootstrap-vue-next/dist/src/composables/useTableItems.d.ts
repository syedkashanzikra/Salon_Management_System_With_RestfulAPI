import { type Ref } from 'vue';
import type { Booleanish, BTableSortCompare, TableField, TableItem } from '../types';
type TableItemsProcessingProps = {
    items?: TableItem[];
    fields?: TableField[];
    perPage?: number;
    currentPage?: number;
    filter?: string;
    filterable?: string[];
    sortBy?: string;
    sortDesc?: Booleanish;
    sortCompare?: BTableSortCompare;
};
declare const _default: (tableProps: TableItemsProcessingProps, flags: Record<string, Ref<boolean>>, usesProvider: Ref<boolean>, sortBy?: Ref<string | undefined>) => {
    internalItems: Ref<{
        [x: string]: unknown;
        _rowVariant?: keyof import("../types").BaseColorVariant | null | undefined;
        _cellVariants?: Partial<Record<string, keyof import("../types").BaseColorVariant>> | undefined;
        _showDetails?: boolean | undefined;
    }[]>;
    computedItems: import("vue").ComputedRef<TableItem[]>;
    updateInternalItems: (items: TableItem<Record<string, any>>[]) => Promise<TableItem[] | undefined>;
    filteredHandler: Ref<((items: TableItem[]) => void) | undefined>;
    notifyFilteredItems: () => void;
    computedDisplayItems: import("vue").ComputedRef<TableItem[]>;
};
export default _default;
