import type { Booleanish } from '../../types';
declare const _default: import("vue").DefineComponent<{
    number: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    form: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    trim: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    autocomplete: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    list: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    required: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: undefined;
    };
    plaintext: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    ariaInvalid: {
        type: import("vue").PropType<import("../../types").AriaInvalid>;
        default: undefined;
    };
    autofocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    formatter: {
        type: import("vue").PropType<(val: any, evt: any) => any>;
        default: undefined;
    };
    lazy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    lazyFormatter: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    readonly: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    wrap: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noResize: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    rows: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
}, {
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (val: any) => void;
    change: (val: any) => void;
    blur: (val: any) => void;
    input: (val: any) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    number: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    name: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    form: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    trim: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    autocomplete: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    list: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    required: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: undefined;
    };
    plaintext: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    ariaInvalid: {
        type: import("vue").PropType<import("../../types").AriaInvalid>;
        default: undefined;
    };
    autofocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    formatter: {
        type: import("vue").PropType<(val: any, evt: any) => any>;
        default: undefined;
    };
    lazy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    lazyFormatter: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    readonly: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    wrap: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noResize: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    rows: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
}>> & {
    "onUpdate:modelValue"?: ((val: any) => any) | undefined;
    onBlur?: ((val: any) => any) | undefined;
    onChange?: ((val: any) => any) | undefined;
    onInput?: ((val: any) => any) | undefined;
}, {
    number: Booleanish;
    name: string;
    form: string;
    trim: Booleanish;
    id: string;
    autocomplete: string;
    disabled: Booleanish;
    list: string;
    placeholder: string;
    required: Booleanish;
    size: keyof import("../../types").BaseSize;
    plaintext: Booleanish;
    ariaInvalid: import("../../types").AriaInvalid;
    autofocus: Booleanish;
    formatter: (val: any, evt: any) => any;
    lazy: Booleanish;
    lazyFormatter: Booleanish;
    modelValue: string | number;
    readonly: Booleanish;
    state: Booleanish | null;
    wrap: string;
    noResize: Booleanish;
    rows: string | number;
}, {}>;
export default _default;
