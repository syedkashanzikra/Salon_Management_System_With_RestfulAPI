import type { Booleanish, InputType } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    name: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    form: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    required: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: string;
    };
    autofocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<string[]>;
        default: () => never[];
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    separator: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    addButtonText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    addButtonVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseButtonVariant | null>;
        default: string;
    };
    addOnChange: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    duplicateTagText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    inputAttrs: {
        type: import("vue").PropType<Record<string, unknown>>;
        default: undefined;
    };
    inputClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    inputId: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    inputType: {
        type: import("vue").PropType<InputType>;
        default: string;
    };
    invalidTagText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    limit: {
        type: import("vue").PropType<number>;
        default: undefined;
    };
    limitTagsText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noAddOnEnter: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noOuterFocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noTagRemove: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    removeOnDelete: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    tagClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    tagPills: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    tagRemoveLabel: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    tagRemovedLabel: {
        type: import("vue").PropType<string>;
        default: string;
    };
    tagValidator: {
        type: import("vue").PropType<(t: string) => boolean>;
        default: () => true;
    };
    tagVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: string;
    };
}, {
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: string[]) => void;
    input: (value: string[]) => void;
    'tag-state': (...args: string[][]) => void;
    focus: (value: FocusEvent) => void;
    focusin: (value: FocusEvent) => void;
    focusout: (value: FocusEvent) => void;
    blur: (value: FocusEvent) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    name: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    form: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        default: string;
    };
    required: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: string;
    };
    autofocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<string[]>;
        default: () => never[];
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    separator: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    addButtonText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    addButtonVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseButtonVariant | null>;
        default: string;
    };
    addOnChange: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    duplicateTagText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    inputAttrs: {
        type: import("vue").PropType<Record<string, unknown>>;
        default: undefined;
    };
    inputClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    inputId: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    inputType: {
        type: import("vue").PropType<InputType>;
        default: string;
    };
    invalidTagText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    limit: {
        type: import("vue").PropType<number>;
        default: undefined;
    };
    limitTagsText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    noAddOnEnter: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noOuterFocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noTagRemove: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    removeOnDelete: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    tagClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    tagPills: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    tagRemoveLabel: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    tagRemovedLabel: {
        type: import("vue").PropType<string>;
        default: string;
    };
    tagValidator: {
        type: import("vue").PropType<(t: string) => boolean>;
        default: () => true;
    };
    tagVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: string[]) => any) | undefined;
    onFocus?: ((value: FocusEvent) => any) | undefined;
    onFocusin?: ((value: FocusEvent) => any) | undefined;
    onFocusout?: ((value: FocusEvent) => any) | undefined;
    onBlur?: ((value: FocusEvent) => any) | undefined;
    onInput?: ((value: string[]) => any) | undefined;
    "onTag-state"?: ((...args: string[][]) => any) | undefined;
}, {
    name: string;
    form: string;
    disabled: Booleanish;
    placeholder: string;
    required: Booleanish;
    size: keyof import("../../types").BaseSize;
    autofocus: Booleanish;
    modelValue: string[];
    state: Booleanish | null;
    separator: string | string[];
    addButtonText: string;
    addButtonVariant: keyof import("../../types").BaseButtonVariant | null;
    addOnChange: Booleanish;
    duplicateTagText: string;
    inputAttrs: Record<string, unknown>;
    inputClass: any;
    inputId: string;
    inputType: InputType;
    invalidTagText: string;
    limit: number;
    limitTagsText: string;
    noAddOnEnter: Booleanish;
    noOuterFocus: Booleanish;
    noTagRemove: Booleanish;
    removeOnDelete: Booleanish;
    tagClass: any;
    tagPills: Booleanish;
    tagRemoveLabel: string;
    tagRemovedLabel: string;
    tagValidator: (t: string) => boolean;
    tagVariant: keyof import("../../types").BaseColorVariant | null;
}, {}>, {
    default?: ((props: {
        addButtonText: string;
        addButtonVariant: keyof import("../../types").BaseButtonVariant | null;
        addTag: (tag?: string | undefined) => void;
        disableAddButton: boolean;
        disabled: boolean;
        duplicateTagText: string;
        duplicateTags: string[];
        form: string | undefined;
        inputAttrs: {
            disabled: boolean;
            form: string | undefined;
            id: import("vue").ComputedRef<string>;
            value: import("vue").Ref<string>;
        };
        inputHandlers: {
            input: (e: string | Event) => void;
            keydown: (e: KeyboardEvent) => void;
            change: (e: Event) => void;
        };
        inputId: import("vue").ComputedRef<string>;
        inputType: InputType;
        invalidTagText: string;
        invalidTags: string[];
        isDuplicate: boolean;
        isInvalid: boolean;
        isLimitReached: boolean;
        limitTagsText: string;
        limit: number | undefined;
        noTagRemove: boolean;
        placeholder: string;
        removeTag: (tag?: string | undefined) => void;
        required: boolean;
        separator: string | string[] | undefined;
        size: keyof import("../../types").BaseSize;
        state: boolean | null;
        tagClass: any;
        tagPills: boolean;
        tagRemoveLabel: string | undefined;
        tagVariant: keyof import("../../types").BaseColorVariant | null;
        tags: string[];
    }) => any) | undefined;
    'add-button-text'?: ((props: Record<string, never>) => any) | undefined;
    tag?: ((props: {
        tag: string;
        tagClass: any;
        tagVariant: keyof import("../../types").BaseColorVariant | null;
        tagPills: boolean;
        removeTag: (tag?: string | undefined) => void;
    }) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
