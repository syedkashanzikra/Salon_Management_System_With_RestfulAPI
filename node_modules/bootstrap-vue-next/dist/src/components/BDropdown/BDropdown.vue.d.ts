import { type Strategy } from '@floating-ui/vue';
import type { Booleanish, ButtonType } from '../../types';
import { BvEvent } from '../../utils';
import type { RouteLocationRaw } from 'vue-router';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    center: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    end: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<string | number | {
            mainAxis?: number | undefined;
            crossAxis?: number | undefined;
            alignmentAxis?: number | null | undefined;
        }>;
        default: number;
    };
    dark: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    text: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    split: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    role: {
        type: import("vue").PropType<string>;
        default: string;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: string;
    };
    lazy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<keyof import("../../types").BaseButtonVariant | null>;
        default: string;
    };
    strategy: {
        type: import("vue").PropType<Strategy>;
        default: string;
    };
    floatingMiddleware: {
        type: import("vue").PropType<{
            name: string;
            options?: any;
            fn: (state: {
                placement: import("@floating-ui/vue").Placement;
                strategy: Strategy;
                x: number;
                y: number;
                initialPlacement: import("@floating-ui/vue").Placement;
                middlewareData: import("@floating-ui/vue").MiddlewareData;
                rects: import("@floating-ui/vue").ElementRects;
                platform: import('../../../node_modules/@floating-ui/core').Platform;
                elements: import("@floating-ui/vue").Elements;
            }) => import("@floating-ui/vue").MiddlewareReturn | Promise<import("@floating-ui/vue").MiddlewareReturn>;
        }[]>;
        default: undefined;
    };
    noFlip: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noShift: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    block: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    isNav: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    ariaLabel: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    menuClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    splitClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    splitVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseButtonVariant | null>;
        default: undefined;
    };
    toggleClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    autoClose: {
        type: import("vue").PropType<boolean | "inside" | "outside">;
        default: boolean;
    };
    dropup: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    dropend: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    dropstart: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    splitButtonType: {
        type: import("vue").PropType<ButtonType>;
        default: string;
    };
    splitHref: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    splitDisabled: {
        type: import("vue").PropType<Booleanish>;
        default: undefined;
    };
    noCaret: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    toggleText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    splitTo: {
        type: import("vue").PropType<RouteLocationRaw>;
        default: undefined;
    };
}, {
    close: () => void;
    open: () => void;
    toggle: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    show: (value: BvEvent) => void;
    shown: () => void;
    hide: (value: BvEvent) => void;
    hidden: () => void;
    'hide-prevented': () => void;
    'show-prevented': () => void;
    click: (event: MouseEvent) => void;
    toggle: () => void;
    'update:modelValue': (value: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    center: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    end: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<string | number | {
            mainAxis?: number | undefined;
            crossAxis?: number | undefined;
            alignmentAxis?: number | null | undefined;
        }>;
        default: number;
    };
    dark: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    text: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    split: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    role: {
        type: import("vue").PropType<string>;
        default: string;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: string;
    };
    lazy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<keyof import("../../types").BaseButtonVariant | null>;
        default: string;
    };
    strategy: {
        type: import("vue").PropType<Strategy>;
        default: string;
    };
    floatingMiddleware: {
        type: import("vue").PropType<{
            name: string;
            options?: any;
            fn: (state: {
                placement: import("@floating-ui/vue").Placement;
                strategy: Strategy;
                x: number;
                y: number;
                initialPlacement: import("@floating-ui/vue").Placement;
                middlewareData: import("@floating-ui/vue").MiddlewareData;
                rects: import("@floating-ui/vue").ElementRects;
                platform: import('../../../node_modules/@floating-ui/core').Platform;
                elements: import("@floating-ui/vue").Elements;
            }) => import("@floating-ui/vue").MiddlewareReturn | Promise<import("@floating-ui/vue").MiddlewareReturn>;
        }[]>;
        default: undefined;
    };
    noFlip: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noShift: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    block: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    isNav: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    ariaLabel: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    menuClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    splitClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    splitVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseButtonVariant | null>;
        default: undefined;
    };
    toggleClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    autoClose: {
        type: import("vue").PropType<boolean | "inside" | "outside">;
        default: boolean;
    };
    dropup: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    dropend: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    dropstart: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    splitButtonType: {
        type: import("vue").PropType<ButtonType>;
        default: string;
    };
    splitHref: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    splitDisabled: {
        type: import("vue").PropType<Booleanish>;
        default: undefined;
    };
    noCaret: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    toggleText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    splitTo: {
        type: import("vue").PropType<RouteLocationRaw>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onHide?: ((value: BvEvent) => any) | undefined;
    onShow?: ((value: BvEvent) => any) | undefined;
    onShown?: (() => any) | undefined;
    onHidden?: (() => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
    onClick?: ((event: MouseEvent) => any) | undefined;
    onToggle?: (() => any) | undefined;
}, {
    center: Booleanish;
    end: Booleanish;
    offset: string | number | {
        mainAxis?: number | undefined;
        crossAxis?: number | undefined;
        alignmentAxis?: number | null | undefined;
    };
    dark: Booleanish;
    text: string;
    split: Booleanish;
    id: string;
    role: string;
    disabled: Booleanish;
    size: keyof import("../../types").BaseSize;
    lazy: Booleanish;
    modelValue: Booleanish;
    variant: keyof import("../../types").BaseButtonVariant | null;
    strategy: Strategy;
    floatingMiddleware: {
        name: string;
        options?: any;
        fn: (state: {
            placement: import("@floating-ui/vue").Placement;
            strategy: Strategy;
            x: number;
            y: number;
            initialPlacement: import("@floating-ui/vue").Placement;
            middlewareData: import("@floating-ui/vue").MiddlewareData;
            rects: import("@floating-ui/vue").ElementRects;
            platform: import('../../../node_modules/@floating-ui/core').Platform;
            elements: import("@floating-ui/vue").Elements;
        }) => import("@floating-ui/vue").MiddlewareReturn | Promise<import("@floating-ui/vue").MiddlewareReturn>;
    }[];
    noFlip: Booleanish;
    noShift: Booleanish;
    block: Booleanish;
    isNav: Booleanish;
    ariaLabel: string;
    menuClass: any;
    splitClass: any;
    splitVariant: keyof import("../../types").BaseButtonVariant | null;
    toggleClass: any;
    autoClose: boolean | "inside" | "outside";
    dropup: Booleanish;
    dropend: Booleanish;
    dropstart: Booleanish;
    splitButtonType: ButtonType;
    splitHref: string;
    splitDisabled: Booleanish;
    noCaret: Booleanish;
    toggleText: string;
    splitTo: RouteLocationRaw;
}, {}>, {
    default?: ((props: Record<string, never>) => any) | undefined;
    'button-content'?: ((props: Record<string, never>) => any) | undefined;
    'toggle-text'?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
