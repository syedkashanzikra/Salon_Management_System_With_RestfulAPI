import type { Booleanish } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    caption: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    text: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    background: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    interval: {
        type: import("vue").PropType<string | number>;
        default: undefined;
    };
    imgAlt: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    imgHeight: {
        type: import("vue").PropType<string | number>;
        default: undefined;
    };
    imgSrc: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    imgWidth: {
        type: import("vue").PropType<string | number>;
        default: undefined;
    };
    captionHtml: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    captionTag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    contentTag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    contentVisibleUp: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    imgBlank: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    imgBlankColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    textHtml: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    textTag: {
        type: import("vue").PropType<string>;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    caption: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    text: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    background: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    interval: {
        type: import("vue").PropType<string | number>;
        default: undefined;
    };
    imgAlt: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    imgHeight: {
        type: import("vue").PropType<string | number>;
        default: undefined;
    };
    imgSrc: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    imgWidth: {
        type: import("vue").PropType<string | number>;
        default: undefined;
    };
    captionHtml: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    captionTag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    contentTag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    contentVisibleUp: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    imgBlank: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    imgBlankColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    textHtml: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    textTag: {
        type: import("vue").PropType<string>;
        default: string;
    };
}>>, {
    caption: string;
    text: string;
    background: string;
    id: string;
    interval: string | number;
    imgAlt: string;
    imgHeight: string | number;
    imgSrc: string;
    imgWidth: string | number;
    captionHtml: string;
    captionTag: string;
    contentTag: string;
    contentVisibleUp: string;
    imgBlank: Booleanish;
    imgBlankColor: string;
    textHtml: string;
    textTag: string;
}, {}>, {
    default?: ((props: Record<string, never>) => any) | undefined;
    img?: ((props: Record<string, never>) => any) | undefined;
    caption?: ((props: Record<string, never>) => any) | undefined;
    text?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
