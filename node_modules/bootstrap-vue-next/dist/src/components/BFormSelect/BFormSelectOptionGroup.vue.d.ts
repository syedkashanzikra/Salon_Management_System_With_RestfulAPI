declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    label: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    options: {
        type: import("vue").PropType<unknown[] | Record<string, unknown>>;
        default: () => never[];
    };
    disabledField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    htmlField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    textField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    valueField: {
        type: import("vue").PropType<string>;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    label: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    options: {
        type: import("vue").PropType<unknown[] | Record<string, unknown>>;
        default: () => never[];
    };
    disabledField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    htmlField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    textField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    valueField: {
        type: import("vue").PropType<string>;
        default: string;
    };
}>>, {
    label: string;
    options: unknown[] | Record<string, unknown>;
    disabledField: string;
    htmlField: string;
    textField: string;
    valueField: string;
}, {}>, {
    default?: ((props: Record<string, never>) => any) | undefined;
    first?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
