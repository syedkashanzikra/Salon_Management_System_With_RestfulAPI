import type { Booleanish } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    fade: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<number | boolean>;
        default: boolean;
    };
    immediate: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: string;
    };
    noHoverPause: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    dismissLabel: {
        type: import("vue").PropType<string>;
        default: string;
    };
    dismissible: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    closeVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseButtonVariant | null>;
        default: string;
    };
    closeContent: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    interval: {
        type: import("vue").PropType<number>;
        default: number;
    };
    showOnPause: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}, {
    pause: () => void;
    resume: () => void;
    restart: () => void;
    stop: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    closed: () => void;
    'close-countdown': (value: number) => void;
    'update:modelValue': (value: number | boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    fade: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<number | boolean>;
        default: boolean;
    };
    immediate: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    variant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: string;
    };
    noHoverPause: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    dismissLabel: {
        type: import("vue").PropType<string>;
        default: string;
    };
    dismissible: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    closeVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseButtonVariant | null>;
        default: string;
    };
    closeContent: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    interval: {
        type: import("vue").PropType<number>;
        default: number;
    };
    showOnPause: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: number | boolean) => any) | undefined;
    onClosed?: (() => any) | undefined;
    "onClose-countdown"?: ((value: number) => any) | undefined;
}, {
    fade: Booleanish;
    modelValue: number | boolean;
    immediate: Booleanish;
    variant: keyof import("../../types").BaseColorVariant | null;
    noHoverPause: Booleanish;
    dismissLabel: string;
    dismissible: Booleanish;
    closeVariant: keyof import("../../types").BaseButtonVariant | null;
    closeContent: string;
    interval: number;
    showOnPause: Booleanish;
}, {}>, {
    default?: ((props: Record<string, never>) => any) | undefined;
    close?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
