import type { Booleanish } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    name: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    form: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    accept: {
        type: import("vue").PropType<string | string[]>;
        default: string;
    };
    capture: {
        type: import("vue").PropType<boolean | "" | "true" | "false" | "user" | "environment">;
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    multiple: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    required: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: undefined;
    };
    autofocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<File | File[] | null>;
        default: null;
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    labelClasses: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    directory: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noDrop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noTraverse: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}, {
    focus: () => void;
    blur: () => void;
    reset: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: File | File[] | null) => void;
    change: (value: Event) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    name: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    form: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    accept: {
        type: import("vue").PropType<string | string[]>;
        default: string;
    };
    capture: {
        type: import("vue").PropType<boolean | "" | "true" | "false" | "user" | "environment">;
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    multiple: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    required: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: undefined;
    };
    autofocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<File | File[] | null>;
        default: null;
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    labelClasses: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    directory: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noDrop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noTraverse: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: File | File[] | null) => any) | undefined;
    onChange?: ((value: Event) => any) | undefined;
}, {
    name: string;
    form: string;
    label: string;
    id: string;
    accept: string | string[];
    capture: boolean | "" | "true" | "false" | "user" | "environment";
    disabled: Booleanish;
    multiple: Booleanish;
    required: Booleanish;
    size: keyof import("../../types").BaseSize;
    autofocus: Booleanish;
    modelValue: File | File[] | null;
    state: Booleanish | null;
    labelClasses: any;
    directory: Booleanish;
    noDrop: Booleanish;
    noTraverse: Booleanish;
}, {}>, {
    label?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
