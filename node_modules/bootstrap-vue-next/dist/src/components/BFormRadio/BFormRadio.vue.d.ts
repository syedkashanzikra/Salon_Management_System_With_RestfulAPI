import type { Booleanish } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    name: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    value: {
        type: import("vue").PropType<string | number | boolean | Record<string, unknown>>;
        default: boolean;
    };
    button: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    form: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    required: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: undefined;
    };
    autofocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
        default: undefined;
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    inline: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    ariaLabel: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    plain: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    buttonGroup: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    buttonVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseButtonVariant | null>;
        default: null;
    };
    ariaLabelledby: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
}, {
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    input: (value: string | number | boolean | unknown[] | Record<string, unknown> | null) => void;
    change: (value: string | number | boolean | unknown[] | Record<string, unknown> | null) => void;
    'update:modelValue': (value: string | number | boolean | unknown[] | Record<string, unknown> | null) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    name: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    value: {
        type: import("vue").PropType<string | number | boolean | Record<string, unknown>>;
        default: boolean;
    };
    button: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    form: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    required: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: undefined;
    };
    autofocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<string | number | boolean | unknown[] | Record<string, unknown> | null>;
        default: undefined;
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    inline: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    ariaLabel: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    plain: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    buttonGroup: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    buttonVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseButtonVariant | null>;
        default: null;
    };
    ariaLabelledby: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: string | number | boolean | unknown[] | Record<string, unknown> | null) => any) | undefined;
    onChange?: ((value: string | number | boolean | unknown[] | Record<string, unknown> | null) => any) | undefined;
    onInput?: ((value: string | number | boolean | unknown[] | Record<string, unknown> | null) => any) | undefined;
}, {
    name: string;
    value: string | number | boolean | Record<string, unknown>;
    button: Booleanish;
    form: string;
    id: string;
    disabled: Booleanish;
    required: Booleanish;
    size: keyof import("../../types").BaseSize;
    autofocus: Booleanish;
    modelValue: string | number | boolean | unknown[] | Record<string, unknown> | null;
    state: Booleanish | null;
    inline: Booleanish;
    ariaLabel: string;
    plain: Booleanish;
    buttonGroup: Booleanish;
    buttonVariant: keyof import("../../types").BaseButtonVariant | null;
    ariaLabelledby: string;
}, {}>, {
    default?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
