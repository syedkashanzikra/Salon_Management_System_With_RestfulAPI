declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    tag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: string;
    };
    append: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    prepend: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    appendHtml: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    prependHtml: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    tag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: string;
    };
    append: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    prepend: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    appendHtml: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    prependHtml: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
}>>, {
    tag: string;
    id: string;
    size: keyof import("../../types").BaseSize;
    append: string;
    prepend: string;
    appendHtml: string;
    prependHtml: string;
}, {}>, {
    default?: ((props: Record<string, never>) => any) | undefined;
    append?: ((props: Record<string, never>) => any) | undefined;
    prepend?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
