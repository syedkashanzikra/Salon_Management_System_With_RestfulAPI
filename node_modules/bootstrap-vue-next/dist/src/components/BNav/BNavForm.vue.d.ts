import type { Booleanish } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    role: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    floating: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    novalidate: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    validated: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    submit: (value: Event) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    role: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    floating: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    novalidate: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    validated: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}>> & {
    onSubmit?: ((value: Event) => any) | undefined;
}, {
    id: string;
    role: string;
    floating: Booleanish;
    novalidate: Booleanish;
    validated: Booleanish;
}, {}>, {
    default?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
