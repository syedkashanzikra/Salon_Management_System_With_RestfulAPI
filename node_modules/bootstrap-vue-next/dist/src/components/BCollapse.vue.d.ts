import type { Booleanish } from '../types';
import { BvTriggerableEvent } from '../utils';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    tag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    toggle: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    visible: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    horizontal: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    isNav: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}, {
    close: () => void;
    open: () => void;
    toggle: () => void;
    visible: Readonly<import("vue").Ref<boolean>>;
    isNav: Readonly<import("vue").Ref<boolean>>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    show: (value: BvTriggerableEvent) => void;
    shown: (value: BvTriggerableEvent) => void;
    hide: (value: BvTriggerableEvent) => void;
    hidden: (value: BvTriggerableEvent) => void;
    'hide-prevented': () => void;
    'show-prevented': () => void;
    'update:modelValue': (value: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    tag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    toggle: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    visible: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    horizontal: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    isNav: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onShown?: ((value: BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
}, {
    tag: string;
    id: string;
    modelValue: Booleanish;
    toggle: Booleanish;
    visible: Booleanish;
    horizontal: Booleanish;
    isNav: Booleanish;
}, {}>, {
    header?: ((props: {
        visible: boolean;
        toggle: () => void;
        open: () => void;
        close: () => void;
        id: string;
    }) => any) | undefined;
    default?: ((props: {
        visible: boolean;
        toggle: () => void;
        open: () => void;
        close: () => void;
    }) => any) | undefined;
    footer?: ((props: {
        visible: boolean;
        toggle: () => void;
        open: () => void;
        close: () => void;
        id: string;
    }) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
