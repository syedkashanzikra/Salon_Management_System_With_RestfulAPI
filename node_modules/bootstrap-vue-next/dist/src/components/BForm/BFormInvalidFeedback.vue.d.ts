import type { Booleanish } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    tag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    text: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    role: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    tooltip: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    ariaLive: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    forceShow: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    tag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    text: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    role: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    tooltip: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    ariaLive: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    forceShow: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}>>, {
    tag: string;
    text: string;
    id: string;
    role: string;
    state: Booleanish | null;
    tooltip: Booleanish;
    ariaLive: string;
    forceShow: Booleanish;
}, {}>, {
    default?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
