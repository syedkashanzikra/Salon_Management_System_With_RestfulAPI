import { type PropType } from 'vue';
import type { Booleanish } from '../../types';
declare const _default: import("vue").DefineComponent<{
    ariaControls: {
        type: StringConstructor;
        default: undefined;
    };
    ariaLabel: {
        type: StringConstructor;
        default: undefined;
    };
    labelIncrement: {
        type: StringConstructor;
        default: string;
    };
    labelDecrement: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: PropType<number | null>;
        default: null;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    locale: {
        type: StringConstructor;
        default: string;
    };
    form: {
        type: StringConstructor;
        default: undefined;
    };
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        default: undefined;
    };
    formatterFn: {
        type: PropType<(value: number) => any>;
        default: undefined;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    repeatDelay: {
        type: PropType<string | number>;
        default: number;
    };
    repeatInterval: {
        type: PropType<string | number>;
        default: number;
    };
    repeatStepMultiplier: {
        type: PropType<string | number>;
        default: number;
    };
    repeatThreshold: {
        type: PropType<string | number>;
        default: number;
    };
    required: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    step: {
        type: PropType<string | number>;
        default: number;
    };
    min: {
        type: PropType<string | number>;
        default: number;
    };
    max: {
        type: PropType<string | number>;
        default: number;
    };
    wrap: {
        type: BooleanConstructor;
        default: boolean;
    };
    state: {
        type: PropType<Booleanish | null>;
        default: null;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "change")[], "update:modelValue" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    ariaControls: {
        type: StringConstructor;
        default: undefined;
    };
    ariaLabel: {
        type: StringConstructor;
        default: undefined;
    };
    labelIncrement: {
        type: StringConstructor;
        default: string;
    };
    labelDecrement: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: PropType<number | null>;
        default: null;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        default: undefined;
    };
    locale: {
        type: StringConstructor;
        default: string;
    };
    form: {
        type: StringConstructor;
        default: undefined;
    };
    inline: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: StringConstructor;
        default: undefined;
    };
    formatterFn: {
        type: PropType<(value: number) => any>;
        default: undefined;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    repeatDelay: {
        type: PropType<string | number>;
        default: number;
    };
    repeatInterval: {
        type: PropType<string | number>;
        default: number;
    };
    repeatStepMultiplier: {
        type: PropType<string | number>;
        default: number;
    };
    repeatThreshold: {
        type: PropType<string | number>;
        default: number;
    };
    required: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    step: {
        type: PropType<string | number>;
        default: number;
    };
    min: {
        type: PropType<string | number>;
        default: number;
    };
    max: {
        type: PropType<string | number>;
        default: number;
    };
    wrap: {
        type: BooleanConstructor;
        default: boolean;
    };
    state: {
        type: PropType<Booleanish | null>;
        default: null;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    name: string;
    form: string;
    disabled: Booleanish;
    max: string | number;
    min: string | number;
    placeholder: string;
    required: Booleanish;
    size: string;
    step: string | number;
    modelValue: number | null;
    readonly: boolean;
    state: Booleanish | null;
    inline: boolean;
    wrap: boolean;
    vertical: boolean;
    ariaLabel: string;
    locale: string;
    ariaControls: string;
    labelIncrement: string;
    labelDecrement: string;
    formatterFn: (value: number) => any;
    repeatDelay: string | number;
    repeatInterval: string | number;
    repeatStepMultiplier: string | number;
    repeatThreshold: string | number;
}, {}>;
export default _default;
