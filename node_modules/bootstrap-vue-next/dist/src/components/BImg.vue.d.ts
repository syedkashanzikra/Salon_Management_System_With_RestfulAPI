import type { Booleanish } from '../types';
declare const _default: import("vue").DefineComponent<{
    fluid: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    center: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    start: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    end: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    src: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    srcset: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    alt: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    width: {
        type: import("vue").PropType<string | number>;
        default: undefined;
    };
    height: {
        type: import("vue").PropType<string | number>;
        default: undefined;
    };
    lazy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    block: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    rounded: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    sizes: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    blank: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    blankColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    fluidGrow: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    thumbnail: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    fluid: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    center: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    start: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    end: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    src: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    srcset: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    alt: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    width: {
        type: import("vue").PropType<string | number>;
        default: undefined;
    };
    height: {
        type: import("vue").PropType<string | number>;
        default: undefined;
    };
    lazy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    block: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    rounded: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    sizes: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    blank: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    blankColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    fluidGrow: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    thumbnail: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
}>>, {
    fluid: Booleanish;
    center: Booleanish;
    start: Booleanish;
    end: Booleanish;
    src: string;
    srcset: string | string[];
    alt: string;
    width: string | number;
    height: string | number;
    lazy: Booleanish;
    block: Booleanish;
    rounded: string | boolean;
    sizes: string | string[];
    blank: Booleanish;
    blankColor: string;
    fluidGrow: Booleanish;
    thumbnail: Booleanish;
}, {}>;
export default _default;
