import { type RendererElement } from 'vue';
import type { Booleanish } from '../../types';
import { BvTriggerableEvent } from '../../utils';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    title: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    lazy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<"top" | "bottom" | "start" | "end">;
        default: string;
    };
    dismissLabel: {
        type: import("vue").PropType<string>;
        default: string;
    };
    bodyClass: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    footerClass: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    headerClass: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    noCloseOnBackdrop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noCloseOnEsc: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    teleportDisabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    teleportTo: {
        type: import("vue").PropType<string | RendererElement | null>;
        default: string;
    };
    bodyScrolling: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    backdrop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noHeaderClose: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noHeader: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noFocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    backdropVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: string;
    };
}, {
    hide: (trigger?: string) => void;
    show: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => void;
    show: (value: BvTriggerableEvent) => void;
    shown: (value: BvTriggerableEvent) => void;
    hide: (value: BvTriggerableEvent) => void;
    hidden: (value: BvTriggerableEvent) => void;
    'hide-prevented': () => void;
    'show-prevented': () => void;
    esc: (value: BvTriggerableEvent) => void;
    close: (value: BvTriggerableEvent) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    lazy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    placement: {
        type: import("vue").PropType<"top" | "bottom" | "start" | "end">;
        default: string;
    };
    dismissLabel: {
        type: import("vue").PropType<string>;
        default: string;
    };
    bodyClass: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    footerClass: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    headerClass: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    noCloseOnBackdrop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noCloseOnEsc: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    teleportDisabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    teleportTo: {
        type: import("vue").PropType<string | RendererElement | null>;
        default: string;
    };
    bodyScrolling: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    backdrop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noHeaderClose: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noHeader: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noFocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    backdropVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onShown?: ((value: BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
    onClose?: ((value: BvTriggerableEvent) => any) | undefined;
    onEsc?: ((value: BvTriggerableEvent) => any) | undefined;
}, {
    title: string;
    id: string;
    lazy: Booleanish;
    modelValue: Booleanish;
    placement: "top" | "bottom" | "start" | "end";
    dismissLabel: string;
    bodyClass: string;
    footerClass: string;
    headerClass: string;
    noCloseOnBackdrop: Booleanish;
    noCloseOnEsc: Booleanish;
    teleportDisabled: Booleanish;
    teleportTo: string | RendererElement | null;
    bodyScrolling: Booleanish;
    backdrop: Booleanish;
    noHeaderClose: Booleanish;
    noHeader: Booleanish;
    noFocus: Booleanish;
    backdropVariant: keyof import("../../types").BaseColorVariant | null;
}, {}>, {
    default?: ((props: Record<string, never>) => any) | undefined;
    title?: ((props: Record<string, never>) => any) | undefined;
    header?: ((props: {
        visible: boolean;
        placement: "top" | "bottom" | "start" | "end";
        hide: (trigger?: string | undefined) => void;
    }) => any) | undefined;
    footer?: ((props: {
        visible: boolean;
        placement: "top" | "bottom" | "start" | "end";
        hide: (trigger?: string | undefined) => void;
    }) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
