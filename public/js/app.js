/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ (() => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n(function () {\n  \"use strict\";\n\n  $(document).on('change', '.datatable-filter [data-filter=\"select\"]', function () {\n    window.renderedDataTable.ajax.reload(null, false);\n  });\n  $(document).on('input', '.dt-search', function () {\n    window.renderedDataTable.ajax.reload(null, false);\n  });\n  var confirmSwal = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(message) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Swal.fire({\n              title: message,\n              icon: 'question',\n              showCancelButton: true,\n              confirmButtonColor: '#d33',\n              cancelButtonColor: '#858482',\n              confirmButtonText: 'Yes, do it!',\n              showClass: {\n                popup: 'animate__animated animate__zoomIn'\n              },\n              hideClass: {\n                popup: 'animate__animated animate__zoomOut'\n              }\n            }).then(function (result) {\n              return result;\n            });\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function confirmSwal(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  window.confirmSwal = confirmSwal;\n  $('#quick-action-form').on('submit', function (e) {\n    e.preventDefault();\n    var form = $(this);\n    var url = form.attr('action');\n    var message = $('[name=\"message_' + $('[name=\"action_type\"]').val() + '\"]').val();\n    var rowdIds = $(\"#datatable_wrapper .select-table-row:checked\").map(function () {\n      return $(this).val();\n    }).get();\n    confirmSwal(message).then(function (result) {\n      if (!result.isConfirmed) return;\n      callActionAjax({\n        url: \"\".concat(url, \"?rowIds=\").concat(rowdIds),\n        body: form.serialize()\n      });\n      //\n    });\n  });\n\n  // Update status on switch\n  $(document).on('change', '#datatable_wrapper .switch-status-change', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      status: $(this).prop('checked') ? 1 : 0,\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n  $(document).on('change', '#datatable_wrapper .change-select', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      value: $(this).val(),\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n  function callActionAjax(_ref2) {\n    var url = _ref2.url,\n      body = _ref2.body;\n    $.ajax({\n      type: 'POST',\n      url: url,\n      data: body,\n      success: function success(res) {\n        if (res.status) {\n          window.successSnackbar(res.message);\n          window.renderedDataTable.ajax.reload(resetActionButtons, false);\n          var event = new CustomEvent('update_quick_action', {\n            detail: {\n              value: true\n            }\n          });\n          document.dispatchEvent(event);\n        } else {\n          Swal.fire({\n            title: 'Error',\n            text: res.message,\n            icon: \"error\",\n            showClass: {\n              popup: 'animate__animated animate__zoomIn'\n            },\n            hideClass: {\n              popup: 'animate__animated animate__zoomOut'\n            }\n          });\n          // window.errorSnackbar(res.message)\n        }\n      }\n    });\n  }\n\n  // Update status on button click\n  $(document).on('click', '#datatable_wrapper .button-status-change', function () {\n    var url = $(this).attr('data-url');\n    var body = {\n      status: 1,\n      _token: $(this).attr('data-token')\n    };\n    callActionAjax({\n      url: url,\n      body: body\n    });\n  });\n  function callActionAjax(_ref3) {\n    var url = _ref3.url,\n      body = _ref3.body;\n    $.ajax({\n      type: 'POST',\n      url: url,\n      data: body,\n      success: function success(res) {\n        if (res.status) {\n          window.successSnackbar(res.message);\n          window.renderedDataTable.ajax.reload(resetActionButtons, false);\n          var event = new CustomEvent('update_quick_action', {\n            detail: {\n              value: true\n            }\n          });\n          document.dispatchEvent(event);\n        } else {\n          window.errorSnackbar(res.message);\n        }\n      }\n    });\n  }\n\n  //select row in datatable\n  var dataTableRowCheck = function dataTableRowCheck(id) {\n    checkRow();\n    if ($(\".select-table-row:checked\").length > 0) {\n      $(\"#quick-action-form\").removeClass('form-disabled');\n      //if at-least one row is selected\n      document.getElementById(\"select-all-table\").indeterminate = true;\n      $(\"#quick-actions\").find(\"input, textarea, button, select\").removeAttr(\"disabled\");\n    } else {\n      //if no row is selected\n      document.getElementById(\"select-all-table\").indeterminate = false;\n      $(\"#select-all-table\").attr(\"checked\", false);\n      resetActionButtons();\n    }\n    if ($(\"#datatable-row-\" + id).is(\":checked\")) {\n      $(\"#row-\" + id).addClass(\"table-active\");\n    } else {\n      $(\"#row-\" + id).removeClass(\"table-active\");\n    }\n  };\n  window.dataTableRowCheck = dataTableRowCheck;\n  var selectAllTable = function selectAllTable(source) {\n    var checkboxes = document.getElementsByName(\"datatable_ids[]\");\n    for (var i = 0, n = checkboxes.length; i < n; i++) {\n      // if disabled property is given to checkbox, it won't select particular checkbox.\n      if (!$(\"#\" + checkboxes[i].id).prop('disabled')) {\n        checkboxes[i].checked = source.checked;\n      }\n      if ($(\"#\" + checkboxes[i].id).is(\":checked\")) {\n        $(\"#\" + checkboxes[i].id).closest(\"tr\").addClass(\"table-active\");\n        $(\"#quick-actions\").find(\"input, textarea, button, select\").removeAttr(\"disabled\");\n        if ($(\"#quick-action-type\").val() == \"\") {\n          $(\"#quick-action-apply\").attr(\"disabled\", true);\n        }\n      } else {\n        $(\"#\" + checkboxes[i].id).closest(\"tr\").removeClass(\"table-active\");\n        resetActionButtons();\n      }\n    }\n    checkRow();\n  };\n  window.selectAllTable = selectAllTable;\n  var checkRow = function checkRow() {\n    if ($(\".select-table-row:checked\").length > 0) {\n      $(\"#quick-action-form\").removeClass('form-disabled');\n      $(\"#quick-action-apply\").removeClass(\"btn-gray\").addClass(\"btn-primary\");\n    } else {\n      $(\"#quick-action-form\").addClass('form-disabled');\n      $(\"#quick-action-apply\").removeClass(\"btn-primary\").addClass(\"btn-gray\");\n    }\n  };\n  window.checkRow = checkRow;\n\n  //reset table action form elements\n  var resetActionButtons = function resetActionButtons() {\n    checkRow();\n    if (document.getElementById(\"select-all-table\") !== undefined && document.getElementById(\"select-all-table\") !== null) {\n      document.getElementById(\"select-all-table\").checked = false;\n      $(\"#quick-action-form\")[0].reset();\n      $(\"#quick-actions\").find(\"input, textarea, button, select\").attr(\"disabled\", \"disabled\");\n      $(\"#quick-action-form\").find(\"select\").select2(\"destroy\").select2().val(null).trigger(\"change\");\n    }\n  };\n  window.resetActionButtons = resetActionButtons;\n  var initDatatable = function initDatatable(_ref4) {\n    var url = _ref4.url,\n      finalColumns = _ref4.finalColumns,\n      advanceFilter = _ref4.advanceFilter,\n      _ref4$drawCallback = _ref4.drawCallback,\n      _drawCallback = _ref4$drawCallback === void 0 ? undefined : _ref4$drawCallback,\n      orderColumn = _ref4.orderColumn;\n    var data_table_limit = $('meta[name=\"data_table_limit\"]').attr('content');\n\n    // console.log(\"test\",advanceFilter);\n    window.renderedDataTable = $('#datatable').DataTable({\n      processing: true,\n      serverSide: true,\n      autoWidth: false,\n      responsive: true,\n      fixedHeader: true,\n      lengthMenu: [[5, 10, 15, 20, 25, 100, -1], [5, 10, 15, 20, 25, 100, 'All']],\n      order: orderColumn,\n      pageLength: data_table_limit,\n      dom: '<\"row align-items-center\"><\"table-responsive my-3\" rt><\"row align-items-center\" <\"col-md-6\" l><\"col-md-6\" p>><\"clear\">',\n      ajax: {\n        \"type\": \"GET\",\n        \"url\": url,\n        \"data\": function data(d) {\n          d.search = {\n            value: $('.dt-search').val()\n          };\n          d.filter = {\n            column_status: $('#column_status').val()\n          };\n          if (typeof advanceFilter == 'function' && advanceFilter() !== undefined) {\n            d.filter = _objectSpread(_objectSpread({}, d.filter), advanceFilter());\n          }\n        }\n      },\n      drawCallback: function drawCallback() {\n        if (laravel !== undefined) {\n          window.laravel.initialize();\n        }\n        $('.select2').select2();\n        if (_drawCallback !== undefined && typeof _drawCallback == 'function') {\n          _drawCallback();\n        }\n      },\n      columns: finalColumns\n    });\n  };\n  window.initDatatable = initDatatable;\n  function formatCurrency(number, noOfDecimal, decimalSeparator, thousandSeparator, currencyPosition, currencySymbol) {\n    // Convert the number to a string with the desired decimal places\n    var formattedNumber = number.toFixed(noOfDecimal);\n\n    // Split the number into integer and decimal parts\n    var _formattedNumber$spli = formattedNumber.split('.'),\n      _formattedNumber$spli2 = _slicedToArray(_formattedNumber$spli, 2),\n      integerPart = _formattedNumber$spli2[0],\n      decimalPart = _formattedNumber$spli2[1];\n\n    // Add thousand separators to the integer part\n    integerPart = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandSeparator);\n\n    // Set decimalPart to an empty string if it is undefined\n    decimalPart = decimalPart || '';\n\n    // Construct the final formatted currency string\n    var currencyString = '';\n    if (currencyPosition === 'left' || currencyPosition === 'left_with_space') {\n      currencyString += currencySymbol;\n      if (currencyPosition === 'left_with_space') {\n        currencyString += ' ';\n      }\n      currencyString += integerPart;\n      // Add decimal part and decimal separator if applicable\n      if (noOfDecimal > 0) {\n        currencyString += decimalSeparator + decimalPart;\n      }\n    }\n    if (currencyPosition === 'right' || currencyPosition === 'right_with_space') {\n      // Add decimal part and decimal separator if applicable\n      if (noOfDecimal > 0) {\n        currencyString += integerPart + decimalSeparator + decimalPart;\n      }\n      if (currencyPosition === 'right_with_space') {\n        currencyString += ' ';\n      }\n      currencyString += currencySymbol;\n    }\n    return currencyString;\n  }\n  window.formatCurrency = formatCurrency;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/app.js"]();
/******/ 	
/******/ })()
;