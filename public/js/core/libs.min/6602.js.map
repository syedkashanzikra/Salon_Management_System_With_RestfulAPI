{"version":3,"file":"js/core/libs.min/6602.js","mappings":"8bAuCA,IAAQA,GAAiBC,EAAAA,EAAAA,MAAjBD,aACFE,GAAcC,EAAAA,EAAAA,KAAI,GAmBlBC,EAAc,QAEdC,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,GAAW,CAAEE,eAAgB,sBAAuBC,KAAK,YAAa,6BAA6B,SAACC,GAAK,OAAMN,EAAYK,KAAKC,EAAM,IAAEH,MAAM,CAAEI,QAAS,0BAChKC,YAAaN,EAAAA,GAAW,CAAEE,eAAgB,4BAC1CK,UAAWP,EAAAA,GAAW,CAAEE,eAAgB,0BACxCM,UAAUR,EAAAA,GAAW,CAAEE,eAAgB,0BACvCO,gBAAgBT,EAAAA,GAAW,CAAEE,eAAgB,gCAC7CQ,cAAcV,EAAAA,GAAW,CAAEE,eAAgB,8BAA+BC,KAAK,YAAa,6BAA6B,SAACC,GAAK,OAAMN,EAAYK,KAAKC,EAAM,IAAEH,MAAM,CAAEI,QAAS,0BAC/KM,SAASX,EAAAA,GAAW,CAAEE,eAAgB,yBACtCU,UAAUZ,EAAAA,GAAW,CAAEE,eAAgB,0BAA2BC,KAAK,YAAa,6BAA6B,SAACC,GAAK,OAAMN,EAAYK,KAAKC,EAAM,IAAEH,MAAM,CAAEI,QAAS,0BACvKQ,UAAUb,EAAAA,GAAW,CAAEE,eAAgB,4BAGzCY,GAA4CC,EAAAA,EAAAA,IAAQ,CAAEhB,iBAAAA,IAA9CiB,EAAYF,EAAZE,aAAcC,EAAMH,EAANG,OAAQC,EAASJ,EAATI,UAEfjB,GAAUkB,EAAAA,EAAAA,IAAS,SAA1Bf,MACOE,GAAgBa,EAAAA,EAAAA,IAAS,eAAhCf,MACOG,GAAcY,EAAAA,EAAAA,IAAS,aAA9Bf,MACOI,GAAcW,EAAAA,EAAAA,IAAS,aAA9Bf,MACOK,GAAoBU,EAAAA,EAAAA,IAAS,mBAApCf,MACOM,GAAkBS,EAAAA,EAAAA,IAAS,iBAAlCf,MACOO,GAAaQ,EAAAA,EAAAA,IAAS,YAA7Bf,MACOQ,GAAcO,EAAAA,EAAAA,IAAS,aAA9Bf,MACOS,GAAcM,EAAAA,EAAAA,IAAS,aAA9Bf,OAKRgB,EAAAA,EAAAA,KAAU,YACRC,EAAAA,EAAAA,KAAcC,EAAAA,EAAAA,IAHH,4FAGkBC,MAAK,SAACC,IA9CjB,SAACC,GACnBP,EAAU,CACRQ,OAAQ,CACNzB,MAAOwB,EAAKxB,MACZK,YAAamB,EAAKnB,YAClBC,UAAYkB,EAAKlB,UACjBC,UAAYiB,EAAKjB,UACjBC,gBAAkBgB,EAAKhB,gBACvBC,cAAgBe,EAAKf,cACrBC,SAAWc,EAAKd,SAChBC,UAAYa,EAAKb,UACjBC,UAAYY,EAAKZ,YAGvB,CAiCIc,CAAYH,EACd,GACF,IAGA,IAUMI,EAAaZ,GAAa,SAACU,GAC/B9B,EAAYQ,OAAQ,EACpBV,EAAa,CAAEmC,IAAKC,EAAAA,GAAWC,KAAML,IAAUH,MAAK,SAACS,GAAG,OAZ3B,SAACA,GAC9BpC,EAAYQ,OAAQ,EAChB4B,EAAIC,OACNC,OAAOC,gBAAgBH,EAAI3B,SAE3B6B,OAAOE,cAAcJ,EAAI3B,QAE7B,CAK+DgC,CAAuBL,EAAI,GAC1F,I,w9FCvGA,EAFoB,C","sources":["webpack:///./resources/js/Setting/SectionPages/MailPage.vue","webpack:///./resources/js/Setting/SectionPages/MailPage.vue?b837"],"sourcesContent":["\n<template>\n  <form @submit=\"formSubmit\">\n    <CardTitle title=\"Mail Settings\" icon=\"fas fa-envelope\"></CardTitle>\n    <div class=\"row row-cols-2\">\n        <InputField class=\"col\" :label=\"$t('setting_mail_page.lbl_email')\" placeholder=\"info@example.com\" v-model=\"email\" :errorMessage=\"errors.email\"></InputField>\n        <InputField class=\"col\" :label=\"$t('setting_mail_page.lbl_driver')\" placeholder=\"smtp\" v-model=\"mail_driver\" :errorMessage=\"errors.mail_driver\"></InputField>\n        <InputField class=\"col\" :label=\"$t('setting_mail_page.lbl_host')\" placeholder=\"smtp.gmail.com\" v-model=\"mail_host\" :errorMessage=\"errors.mail_host\"></InputField>\n        <InputField class=\"col\" :label=\"$t('setting_mail_page.lbl_port')\" placeholder=\"587\" v-model=\"mail_port\" :errorMessage=\"errors.mail_port\"></InputField>\n        <InputField class=\"col\" :label=\"$t('setting_mail_page.lbl_encryption')\" placeholder=\"tls\" v-model=\"mail_encryption\" :errorMessage=\"errors.mail_encryption\"></InputField>\n        <InputField class=\"col\" :label=\"$t('setting_mail_page.lbl_username')\" placeholder=\"youremail@gmail.com\" v-model=\"mail_username\" :errorMessage=\"errors.mail_username\"></InputField>\n        <InputField class=\"col\" :label=\"$t('setting_mail_page.lbl_password')\" type=\"password\" placeholder=\"Password\" v-model=\"Password\" :errorMessage=\"errors.Password\"></InputField>\n        <InputField class=\"col\" :label=\"$t('setting_mail_page.lbl_mail')\" placeholder=\"youremail@gmail.com\" v-model=\"mail_from\" :errorMessage=\"errors.mail_from\"></InputField>\n        <InputField class=\"col\" :label=\"$t('setting_mail_page.lbl_from_name')\" placeholder=\"Dev.Community\" v-model=\"from_name\" :errorMessage=\"errors.from_name\"></InputField>\n    </div>\n    <div>\n      <button :disabled=\"IS_SUBMITED\" class=\"btn btn-success\" name=\"submit\">\n          <template v-if=\"IS_SUBMITED\">\n            <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n            Loading...\n          </template>\n          <template v-else> <i class=\"fa-solid fa-floppy-disk\"></i> Submit</template>\n        </button>\n    </div>\n  </form>\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport CardTitle from '@/Setting/Components/CardTitle.vue'\nimport InputField from '@/vue/components/form-elements/InputField.vue'\nimport { useField, useForm } from 'vee-validate'\nimport { STORE_URL, GET_URL } from '@/vue/constants/setting'\n\nimport * as yup from 'yup';\nimport { useRequest } from '@/helpers/hooks/useCrudOpration'\nimport { onMounted } from 'vue'\nimport { createRequest } from \"@/helpers/utilities\"\n\nconst { storeRequest } = useRequest()\nconst IS_SUBMITED = ref(false)\n\n//  Reset Form\nconst setFormData = (data) => {\n  resetForm({\n    values: {\n      email: data.email,\n      mail_driver: data.mail_driver,\n      mail_host : data.mail_host,\n      mail_port : data.mail_port,\n      mail_encryption : data.mail_encryption,\n      mail_username : data.mail_username,\n      Password : data.Password,\n      mail_from : data.mail_from,\n      from_name : data.from_name\n    }\n  })\n}\n\nconst numberRegex = /^\\d+$/;\n//validation\nconst validationSchema = yup.object({\n  email: yup.string({ required_error: \"Email is required\",}).test('is-string', 'First strings are allowed', (value) => !numberRegex.test(value)).email({ message: 'Must be a valid email' }),\n  mail_driver: yup.string({ required_error: \"mail driver is required\",}),\n  mail_host: yup.string({ required_error: \"mail host is required\",}),\n  mail_port:yup.string({ required_error: \"mail port is required\",}),\n  mail_encryption:yup.string({ required_error: \"mail encryption is required\",}),\n  mail_username:yup.string({ required_error: \"mail username is required\",}).test('is-string', 'First strings are allowed', (value) => !numberRegex.test(value)).email({ message: 'Must be a valid email' }),\n  Password:yup.string({ required_error: \"Password is required\",}),\n  mail_from:yup.string({ required_error: \"mail from is required\",}).test('is-string', 'First strings are allowed', (value) => !numberRegex.test(value)).email({ message: 'Must be a valid email' }),\n  from_name:yup.string({ required_error: \"from name is required\",})\n})\n\nconst { handleSubmit, errors, resetForm } = useForm({ validationSchema })\n\nconst { value: email } = useField('email')\nconst { value: mail_driver } = useField('mail_driver')\nconst { value: mail_host } = useField('mail_host')\nconst { value: mail_port } = useField('mail_port')\nconst { value: mail_encryption } = useField('mail_encryption')\nconst { value: mail_username } = useField('mail_username')\nconst { value: Password } = useField('Password')\nconst { value: mail_from } = useField('mail_from')\nconst { value: from_name } = useField('from_name')\n\n//fetch data\nconst data = 'email,mail_driver,mail_host,mail_port,mail_encryption,mail_username,mail_from,from_name'\n\nonMounted(() => {\n  createRequest(GET_URL(data)).then((response) => {\n    setFormData(response)\n  })\n})\n\n// message\nconst display_submit_message = (res) => {\n  IS_SUBMITED.value = false;\n  if (res.status) {\n    window.successSnackbar(res.message)\n  } else {\n    window.errorSnackbar(res.message)\n  }\n}\n\n//Form Submit\nconst formSubmit = handleSubmit((values) => {\n  IS_SUBMITED.value = true;\n  storeRequest({ url: STORE_URL, body: values }).then((res) => display_submit_message(res))\n})\n</script>\n\n","import script from \"./MailPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MailPage.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["storeRequest","useRequest","IS_SUBMITED","ref","numberRegex","validationSchema","yup","email","required_error","test","value","message","mail_driver","mail_host","mail_port","mail_encryption","mail_username","Password","mail_from","from_name","_useForm","useForm","handleSubmit","errors","resetForm","useField","onMounted","createRequest","GET_URL","then","response","data","values","setFormData","formSubmit","url","STORE_URL","body","res","status","window","successSnackbar","errorSnackbar","display_submit_message"],"sourceRoot":""}